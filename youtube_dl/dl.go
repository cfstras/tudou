package youtube_dl

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"
	"syscall"
)

// The format of the info JSON file generated by youtube-dl
type Info struct {
	Extractor     string  `json:"extractor"`
	Playlist      *string `json:"playlist"`
	STitle        string  `json:"stitle"`
	Title         string  `json:"title"`
	VideoUrl      string  `json:"url"`
	Format        string  `json:"format"`
	PlaylistIndex *string `json:"playlist_index"`
	ThumbnailUrl  string  `json:"thumbnail"`
	Extension     string  `json:"ext"`
	FullTitle     string  `json:"fulltitle"`
	Id            int64   `json:"id"`
}

const TudouUrl = "http://tudou.com/programs/view/"

func Load(url string) (file *os.File, length int64, info Info, infoBytes []byte,
	err error) {
	cmd := exec.Command("youtube-dl", "--verbose", "-o", "-", "--write-info-json", url)
	var stderr io.ReadCloser
	stderr, err = cmd.StderrPipe()
	if err != nil {
		return
	}
	bio := bufio.NewReader(stderr)

	file, err = ioutil.TempFile(".", "tudou-scraper-ytdl-")
	if err != nil {
		return
	}
	cmd.Stdout = file

	err = cmd.Start()
	if err != nil {
		return
	}
	filename := "-.info.json"
	for { // pipe output
		var line string
		line, err = bio.ReadString('\n')
		line = strings.TrimRight(line, "\r\n")
		if err != nil {
			if err != io.EOF {
				fmt.Println("Error reading from stderr:", err)
				return
			} else {
				err = nil
				break
			}
		}
		fmt.Println(line)
	}
	if filename == "" {
		err = errors.New("No Metadata given.")
	}
	err = cmd.Wait()
	if err != nil {
		return
	}

	infoBytes, err = ioutil.ReadFile(filename)
	if err != nil {
		cmd.Process.Signal(syscall.SIGTERM)
		return
	}
	err = os.Remove(filename)
	if err != nil {
		cmd.Process.Signal(syscall.SIGTERM)
		return
	}
	err = json.Unmarshal(infoBytes, &info)
	if err != nil {
		cmd.Process.Signal(syscall.SIGTERM)
		return
	}

	length, err = file.Seek(0, 2) // seek to end
	if err != nil {
		return
	}
	_, err = file.Seek(0, 0) // seek to start
	return
}
